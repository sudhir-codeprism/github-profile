{"version":3,"sources":["components/GithubProfileCard.js","components/GithubProfileDetails.js","components/GithubProfile.js","components/Githubcredential.js","components/GithubRepos.js","components/GithubApi.js","App.js","serviceWorker.js","index.js"],"names":["GithubProfileCard","props","this","profile","name","avatar_url","bio","html_url","className","src","alt","href","target","React","Component","GithubProfileDetails","followers","public_repos","public_gists","following","email","location","company","blog","created_at","GithubProfile","Object","keys","length","clientSecret","GithubRepos","repos","map","repo","stargazers_count","watchers_count","GithubApi","updateInput","e","setState","state","username","value","searchUser","preventDefault","searchProfile","searchRepos","Axios","get","then","posRes","console","log","data","catch","errRes","onSubmit","type","size","placeholder","onChange","App","Boolean","window","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"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","file":"static/js/main.96cb7f39.chunk.js","sourcesContent":["import React, { Component, Fragment } from 'react'\r\n\r\n\r\nclass GithubProfileCard extends React.Component{\r\n    constructor(props){\r\n        super(props)\r\n\r\n    }\r\n\r\n    render(){\r\n        let {name, avatar_url, bio, html_url} = this.props.profile;\r\n        return(\r\n            <Fragment>\r\n              <div className='card'>\r\n                  <img src={avatar_url} alt='' className='img-fluid' />\r\n                  <div className='card-body'>\r\n                   <h4 className='card-title'>{name}</h4>\r\n                     <p>{bio}</p>\r\n                     <a href={html_url} target=\"_blank\" className='btn btn-success btn-sm'>Profile</a>\r\n                  </div>\r\n                 </div>          \r\n                   </Fragment>\r\n        )\r\n    }\r\n}\r\n\r\nexport default GithubProfileCard;","import React, { Component, Fragment } from 'react'\r\n\r\n\r\nclass GithubProfileDetails extends React.Component{\r\n    constructor(){\r\n        super()\r\n\r\n    }\r\n\r\n    render(){\r\n        let {followers, public_repos, public_gists, following, \r\n             name, email, location, company, blog, created_at, html_url} = this.props.profile; \r\n        return(\r\n            <Fragment>\r\n              <div className='card'>\r\n              <div className='card-header bg-light'>\r\n        <span className='badge badge-primary mx-2'>{followers}Followers</span>\r\n        <span className='badge badge-success mx-2'>{public_repos}Repos</span>\r\n        <span className='badge badge-warning mx-2'>{public_gists}Gists</span>\r\n        <span className='badge badge-danger mx-2'>{following}Following</span>\r\n            </div>\r\n             <div className='card-body'>\r\n              <ul className='list-group'>\r\n              <li className='list-group-item'>User Name :{name}</li>\r\n              <li className='list-group-item'>Location :{location}</li>\r\n              <li className='list-group-item'>Email :{email}</li>\r\n              <li className='list-group-item'>Company :{company}</li>\r\n              <li className='list-group-item'>Blog :{blog}</li>\r\n              <li className='list-group-item'>Member Since :{created_at}</li>\r\n              <li className='list-group-item'>Profile URL :{html_url}</li>\r\n\r\n              </ul>\r\n              </div>\r\n              </div>\r\n            </Fragment>\r\n        )\r\n    }\r\n}\r\n\r\nexport default GithubProfileDetails;","import React, { Component } from 'react'\r\nimport GithubProfileCard from './GithubProfileCard'\r\nimport GithubProfileDetails from './GithubProfileDetails'\r\n\r\nclass GithubProfile extends React.Component{\r\n    constructor(props){\r\n        super(props)\r\n\r\n    }\r\n\r\n    render(){\r\n        return(\r\n            <div>\r\n               <div className='container'>\r\n                   <div className='row'>\r\n                <div className='col-md-3'>\r\n                    {\r\n                        Object.keys(this.props).length !==0 ?\r\n                       <GithubProfileCard profile={this.props.profile}/> : null        \r\n                    }\r\n               \r\n                </div>\r\n                <div className='col-md-9'>\r\n               \r\n               {\r\n                        Object.keys(this.props).length !==0 ?\r\n                       <GithubProfileDetails profile={this.props.profile}/> : null        \r\n                    }\r\n                </div>\r\n                   </div>\r\n\r\n               </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default GithubProfile;","export const clientId = '9b2e6eb46a8fe42bac72';\r\nexport const clientSecret = 'fc101c6416e3d397a6634213ae3d0358144ed55e'","import React, { Component, Fragment } from 'react'\r\n\r\n\r\nclass GithubRepos extends React.Component{\r\n    constructor(props){\r\n        super(props)\r\n    }\r\n\r\n\r\n    render(){\r\n        \r\n        return(\r\n            <Fragment>\r\n    <div className='card'>\r\n    <div className='card-header bg-success text-white'>\r\n        <h2>Github Repositories</h2>\r\n        </div>\r\n        <div className='card-body'>\r\n        <ul className='list-group'>\r\n   {\r\n       this.props.repos.map((repo)=>{\r\n    return (\r\n        <li className='list-group-item bg-light'>\r\n   <a href={repo.html_url} target=\"_blank\">{repo.name}</a>\r\n   <span className='badge badge-success mx-5'>{repo.stargazers_count}Star</span>\r\n   <span className='badge badge-warning mx-5'>{repo.watchers_count}Watches</span>\r\n   </li>\r\n    )\r\n       })\r\n   }\r\n        </ul>\r\n    </div>\r\n    </div>\r\n            </Fragment>\r\n        )\r\n    }\r\n}\r\n\r\nexport default GithubRepos;","import React,  {Fragment} from 'react'\r\nimport GithubProfile from './GithubProfile'\r\nimport Axios from 'axios';\r\nimport { clientSecret, clientId } from './Githubcredential';\r\nimport GithubRepos from './GithubRepos';\r\n\r\nclass GithubApi extends React.Component{\r\n    constructor(){\r\n        super()\r\nthis.state={\r\n    username: '',\r\n    profile: null,\r\n    repos : null\r\n}\r\n    }\r\n// Two way Data Binding\r\n    updateInput =(e)=>{\r\n\r\n        this.setState({\r\n            ...this.state, \r\n            username: e.target.value\r\n        })\r\n\r\n      \r\n    }\r\n\r\n\r\n\r\n         // form Submission\r\nsearchUser = (e)=>{\r\n    e.preventDefault();\r\n    this.searchProfile();\r\n   this.searchRepos();\r\n}\r\n// Search a profile\r\nsearchProfile =()=>{\r\nAxios.get(`https://api.github.com/users/${this.state.username}?clientId=${clientId}&clientSecret=${clientSecret}`).then((posRes)=>{\r\nconsole.log(posRes.data);\r\n\r\nthis.setState({\r\n    profile : posRes.data\r\n})\r\n}).catch((errRes)=>{\r\n    console.log(errRes);\r\n})\r\n}\r\n\r\n\r\nsearchRepos =()=>{\r\n    Axios.get(`https://api.github.com/users/${this.state.username}/repos?clientId=${clientId}&clientSecret=${clientSecret}`).then((posRes)=>{\r\n    console.log(posRes.data);\r\n    \r\n    this.setState({\r\n        repos : posRes.data\r\n    })\r\n    }).catch((errRes)=>{\r\n        console.log(errRes);\r\n    })\r\n    }\r\n    \r\n\r\n    render(){\r\n        return(\r\n            <Fragment>\r\n                {/* <pre>{JSON.stringify(this.state)}</pre> */}\r\n           <div className='container mt-2'>\r\n               <div className='row'>\r\n             <div className='col'>\r\n             <div className='card'>\r\n             <div className='card-header bg-secondary text-white'>\r\n         <h3>Github User Search</h3>\r\n         </div>\r\n         <div className='card-body'>\r\n         <form className='form-inline' onSubmit={this.searchUser}>\r\n             <div className='form-group'>\r\n            <input type='text' size='40' \r\n            className='form-control'\r\n             placeholder='User Name' \r\n             value={this.state.username}\r\n             onChange={this.updateInput}\r\n             />\r\n             </div>\r\n             <div>\r\n                 <input type='submit'   className='btn btn-secondary btn-sm' value='search' />\r\n             </div>\r\n         </form>\r\n             </div>\r\n         </div>\r\n             </div>\r\n               </div>\r\n    \r\n          </div>      \r\n          <div className='container mt-3'>\r\n              <div className='row'>\r\n              <div className='col'>\r\n                  {\r\n                      this.state.profile ?\r\n                                       <GithubProfile profile={this.state.profile} /> : null\r\n\r\n                  }\r\n              </div>\r\n              </div> \r\n              </div>    \r\n\r\n\r\n              <div className='container mt-3'>\r\n              <div className='row'>\r\n              <div className='col'>\r\n                  {\r\n                      this.state.repos ?\r\n                                       <GithubRepos repos={this.state.repos} /> : null\r\n\r\n                  }\r\n              </div>\r\n              </div> \r\n              </div>    \r\n         </Fragment>\r\n        )\r\n    }\r\n}\r\n\r\nexport default GithubApi; \r\n","import React from 'react';\nimport './App.css';\nimport GithubApi from './components/GithubApi';\nfunction App() {\n  return (\n    <div>\n    <div className=\"navbar navbar-dark bg-secondary\">\n    <h2 className='text-white'>GitHub Profile Search</h2>\n    </div>\n<GithubApi />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}